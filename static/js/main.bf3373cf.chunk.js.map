{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomFloatFromRange","min","max","Math","random","randomFromArray","arr","floor","length","Particle","canvas","ctx","x","y","radius","color","velX","velY","this","velocity","timeToLive","opacity","gravity","save","beginPath","arc","PI","fillStyle","shadowColor","shadowBlur","globalAlpha","fill","closePath","restore","draw","Ball","particlesArr","dontCheck","acc","origin","collided","shadowOffsetX","shadowOffsetY","ballsArr","updateVel","height","collisionDetect","x1","y1","x2","y2","i","sqrt","pow","j","break","forEach","ball","particle","width","minRadius","maxRadius","c","spawnX","spawnY","randRadius","randVel","push","colorDefault","colorTochange","App","useEffect","Splitting","document","querySelector","getContext","canvasHeight","window","innerHeight","canvasWidth","redBall","blueBall","timeInterval","velocityOfBall","fillColor","retryBtn","retryText","playBtn","startScreen","balls","particles","separation","globalRadius","generateBall","failed","timer","score","colors","randPoints","init","uselessBalls","randVelXY","r","initUseless","background","color1","color2","bg","createLinearGradient","addColorStop","BG_Gradient","loop","requestAnimationFrame","fillRect","font","fillText","toString","update","edgeDetect","index","splice","randomPoint","randomColor","pushNewBalls","classList","remove","add","setInterval","addEventListener","change","className","data-splitting","data-canvas","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bf3373cf.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.scss';\nimport Splitting from 'splitting';\n\n// Original game found here https://codepen.io/dev_loop/pen/gOYLbge\n\n// Utility Functions -->\n\n// This func. gets a random float between the given range\nfunction randomFloatFromRange(min, max){\n  return (Math.random() * (max - min + 1) + min);\n}\n\n// This func. gets a random item from a given array\nfunction randomFromArray(arr){\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n// This func. gets the distance between two given points\nfunction getDist(x1, y1, x2, y2){\n  return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2))\n}\n\n// PARTICLE CLASS\nclass Particle{\n  constructor(canvas, ctx, x, y, radius, color, velX, velY){\n    this.canvas = canvas\n    this.ctx = ctx\n    this.x = x\n    this.y = y\n    this.velocity = {\n      x: (Math.random() - 0.5) * velX,\n      y: (Math.random() - 0.5) * velY,\n    }\n    this.radius = radius\n    this.color = color\n    this.timeToLive = 250\n    this.opacity = 1\n    this.gravity = 0.25\n  }\n  draw(){ // This func. draws the particle\n    this.ctx.save()\n    this.ctx.beginPath()\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n    this.ctx.fillStyle = this.color\n    this.ctx.shadowColor = this.color\n    this.shadowBlur = 25\n    this.ctx.globalAlpha = this.opacity\n    this.ctx.fill()\n    this.ctx.closePath()\n    this.ctx.restore()\n  }\n  update(){ // This func. updates the particle\n    this.x += this.velocity.x\n    this.y += this.velocity.y\n    this.velocity.y += this.gravity\n\n    this.timeToLive -= 1\n    this.opacity -= 1 / this.timeToLive\n    this.draw()\n  }\n}\n\n// BALL CLASS\nclass Ball{\n  constructor(canvas, ctx, x, y, radius, color, particlesArr, velX, velY, dontCheck){\n    this.canvas = canvas\n    this.ctx = ctx\n    this.x = x\n    this.y = y\n    this.radius = radius\n    this.color = color\n    this.velocity = {\n      x: velX || 0,\n      y: velY || 0\n    }\n    this.acc = 0.01\n    this.origin = { x: x, y: y }\n    this.dontCheck = dontCheck\n    this.opacity = 1\n    this.particlesArr = particlesArr\n    this.collided = false\n  }\n  draw(){ // This func. draws the ball\n    this.ctx.save()\n    this.ctx.beginPath()\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n    this.ctx.fillStyle = this.color\n    this.ctx.shadowColor = this.color\n    this.shadowBlur = 25\n    this.ctx.shadowOffsetX = 0;\n    this.ctx.shadowOffsetY = 0;\n    this.ctx.globalAlpha = this.opacity\n    this.ctx.fill()\n    this.ctx.closePath()\n    this.ctx.restore()\n  }\n  // This func. updates the ball. The first argument of this func. takes an array where all the insrtance of balls are stored\n  // The second argument is opotional [default is False]. If set to true then the position of the ball changes with its respective Velocity\n  update(ballsArr, updateVel = false){\n    if(this.origin.y <= 0){\n      this.y += this.velocity.y\n    }\n    else if(this.origin.y >= this.canvas.height){\n      this.y -= this.velocity.y\n    }\n    if(updateVel == true){\n      this.y += this.velocity.y\n      this.x += this.velocity.x\n    }\n\n    this.collisionDetect(ballsArr)\n    this.draw()\n  }\n  // This func. is used to detect the collisions bettween any two balls\n  // The func. takes an argument which is the array where al the balls are stored\n  collisionDetect(ballsArr){\n    for(let i = 0; i < ballsArr.length; i++){\n      if(this === ballsArr[i] || this.dontCheck) continue\n      let distBetweenPoints = getDist(this.x, this.y, ballsArr[i].x, ballsArr[i].y) - this.radius * 2\n      if(distBetweenPoints < 0){\n        if(this.color == ballsArr[i].color){\n          for(let j = 0; j < Math.floor(randomFloatFromRange(20, 25)); j++){\n            this.break(this.particlesArr, 0.4, 0.8)\n            this.collided = true\n          }\n          this.opacity = 0\n        }\n        else if(this.color != ballsArr[i].color){\n          for(let j = 0; j < Math.floor(randomFloatFromRange(40, 55)); j++){\n            ballsArr.forEach((ball) => {\n              ball.opacity = 0\n              this.break(this.particlesArr, 2, 5, ball.x, ball.y, ball.color)\n            })\n            this.particlesArr.forEach((particle) => {\n              particle.gravity = 0\n            })\n          }\n        }\n      }\n    }\n  }\n  // This func. is used to detect if the ball hits any of the corners of the canvas\n  // If hits any of the canvas sides then the ball would change its velocity direction\n  edgeDetect(){\n    if (this.y + this.radius + this.velocity.y > this.canvas.height) {\n      this.velocity.y *= -1\n    }\n    else if(this.y - this.radius <= 0){\n      this.velocity.y *= -1\n    }\n\n    if (this.x + this.radius + this.velocity.x > this.canvas.width) {\n      this.velocity.x *= -1\n    }\n    else if (this.x - this.radius <= 0) {\n      this.velocity.x *= -1\n    }\n  }\n  // This function is used to show that when any ball hits each other then they create many small particles [Which looks kinda like sparks]\n  // This func. takes 6 arguments [too many]\n  // The first accepts an array where the sparks OR the small particles would be stored\n  // The second and the third argument is nothing but accepts a min and max radius\n  // The forth and fifth args. tahes where the sparks would be spawned\n  // The sixth is nothing but 'c' which means color. I want to make the sparks the same color as the ball\n  break(arr, minRadius, maxRadius, x, y, c){\n    var randRadius = randomFloatFromRange(minRadius, maxRadius)\n    var randVel = {\n      x: randomFloatFromRange(-20, 20),\n      y: randomFloatFromRange(-20, 20),\n    }\n    if(this.origin.y <= 0){\n      let spawnX , spawnY\n      let color\n      if(x && y){\n        spawnX = x\n        spawnY = y\n        color = c\n      }else{\n        spawnX = this.x\n        spawnY = this.y + this.radius\n        color = this.color\n      }\n      arr.push(\n        new Particle(\n          this.canvas, this.ctx,\n          spawnX, spawnY,\n          randRadius, color , randVel.x, randVel.y\n        )\n      )\n    }else{\n      let spawnX , spawnY\n      let color\n      if(x && y){\n        spawnX = x\n        spawnY = y\n        color = c\n      }else{\n        spawnX = this.x\n        spawnY = this.y - this.radius\n        color = this.color\n      }\n      arr.push(\n        new Particle(\n          this.canvas, this.ctx,\n          spawnX, spawnY,\n          randRadius, color , randVel.x, randVel.y\n        )\n      )\n    }\n  }\n  // When this func. is called with two colors passed as args. then it swaps the color between the two color provided\n  change(colorDefault, colorTochange){\n    if(this.color != colorDefault){\n      this.color = colorDefault\n    }else{\n      this.color = colorTochange\n    }\n  }\n}\n\nconst App = () => {\n  useEffect(() => {\n    Splitting();\n    // Selecting the canvas\n    const canvas = document.querySelector('[data-canvas]')\n    // getting its context\n    const ctx = canvas.getContext('2d')\n\n    // Setting its width and height\n    let canvasHeight = window.innerHeight - 50,\n      canvasWidth = 400\n    canvas.width = canvasWidth\n    canvas.height = canvasHeight\n\n\n    var retryBtn = document.querySelector('.retry-btn')\n    var retryText = document.querySelector('.retry-text')\n    var playBtn = document.querySelector('.btn.play')\n    var startScreen = document.querySelector('.start-screen')\n\n\n    // Initializing everything\n\n    let balls = [], // balls array\n      particles = [] // sparks array\n    var redBall, blueBall // the TWO cantral balls\n    var separation = 35 // separation between central balls\n    var globalRadius = 18 // radius for all the Balls\n    let generateBall = false // generate a new ball or not\n    let timeInterval\n    let velocityOfBall // velocity of the ball\n    let failed = true // game failed or not\n    let timer = 0 // timer (increments every 1ms)\n    let score = 0 // score counter\n    let fillColor // Text fill color\n    // colors array\n    var colors = ['#e74c3c', '#3498db']\n    // random points where the ball would generate and start moving\n    var randPoints = [\n      {\n        x: canvas.width / 2,\n        y: -50\n      },\n      {\n        x: canvas.width / 2,\n        y: canvas.height + 50\n      }\n    ]\n\n    // Function that initializes the canvas\n    function init(){\n      balls = []\n      particles = []\n      uselessBalls = []\n      generateBall = true\n      timeInterval = 2000\n      timer = 0\n      velocityOfBall = 2.5\n      score = 0\n      fillColor = '#fff'\n      failed = false;\n\n      blueBall = new Ball(\n        canvas, ctx,\n        canvasWidth/2, canvasHeight/2 - separation,\n        globalRadius, colors[1], particles, 0, 0, true\n      )\n      redBall = new Ball(\n        canvas, ctx,\n        canvasWidth/2, canvasHeight/2 + separation,\n        globalRadius, colors[0], particles, 0, 0, true\n      )\n      balls.push(redBall, blueBall)\n    }\n\n    // This is an array for a bunch of useless balls on the start of the game\n    var uselessBalls = []\n    // This function will push many useless balls balls to the useless array and then push all the useless balls to the default ballas array\n    function initUseless(){\n      for(let i = 0; i < 20; i++){\n        let randVelXY = {\n          x: randomFloatFromRange(-5, 5),\n          y: randomFloatFromRange(-5, 5)\n        }\n        let r = randomFloatFromRange(5, 10)\n        uselessBalls.push(\n          new Ball(\n            canvas, ctx, canvasWidth / 2, canvasHeight / 2,\n            r, colors[Math.floor(Math.random() * colors.length)],\n            particles, randVelXY.x, randVelXY.y, true\n          )\n        )\n      }\n      balls.push([...uselessBalls])\n    }\n    // calling it on execution of code\n    initUseless()\n\n\n    // initialiazing the background in a variable\n    var background = BG_Gradient('#2c3e50', '#34495e')\n\n    // this func. calls itself again and again every 60ms and is the reason you can play this game\n    function loop(){\n      // func. that will call itself\n      requestAnimationFrame(loop)\n\n      // seting the background\n      ctx.fillStyle = background\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n      // setting the scorecard\n      ctx.fillStyle = fillColor\n      ctx.font = '21px sans-serif'\n      ctx.fillText(`SCORE : ${score.toString()}`, 20, 35)\n\n      // updating every uselessballs\n      uselessBalls.forEach(ball => {\n        ball.update(balls, true)\n        ball.edgeDetect()\n      })\n      if(uselessBalls.length != 0){\n        return\n      }\n\n      // updating every balls in the balls array\n      if(balls.length != 0){\n        balls.forEach((ball, index) => {\n          ball.update(balls)\n          if(ball.collided == true){\n            score += 10\n            fillColor = ball.color\n          }\n          if(ball.opacity <= 0){\n            ball.dontCheck = true\n            balls.splice(index, 1)\n          }\n        })\n      }\n      if(balls.length == 0 || balls.length == 1){\n        failed = true\n        generateBall = false\n      }\n      if(balls.length == 2){\n        generateBall = true\n      }\n      if(timeInterval % timer == 0 && generateBall == true){\n        generateBall = false\n        pushNewBalls()\n      }\n\n      // updating every particles or sparks in the particles array\n      if(particles.length != 0){\n        particles.forEach((particle, index) => {\n          particle.update()\n          if(particle.opacity <= 0.05){\n            particles.splice(index, 1)\n          }\n        })\n      }\n\n      // reseting the timer to 0 every 600ms\n      if(timer == 600){\n        timer = 0\n      }\n\n      // func. that is used to show and hide the UI options\n      showHideOptions()\n      // increment timer by 1 every 1ms\n      timer++\n    }\n    // calling the func. once will make the recurrsion possible which in return will start the animations\n    loop()\n\n\n    // Function that is used tto push new balls to the Balls array whenever called\n    function pushNewBalls(){\n      var randomPoint = randomFromArray(randPoints),\n        randomColor = randomFromArray(colors)\n      balls.push(\n        new Ball(\n          canvas, ctx,\n          randomPoint.x, randomPoint.y,\n          globalRadius, randomColor, particles, 0, velocityOfBall, false\n        )\n      )\n    }\n\n    // Func. to show and hide the UI\n    function showHideOptions(){\n      if(failed == true && generateBall == false){\n        retryText.classList.remove('hide')\n        retryText.classList.add('show')\n        retryBtn.classList.remove('hide')\n        retryBtn.classList.add('show')\n      }else if(failed == false && generateBall == true){\n        retryText.classList.add('hide')\n        retryText.classList.remove('show')\n        retryBtn.classList.add('hide')\n        retryBtn.classList.remove('show')\n      }\n    }\n\n    // Func. that returns simple color gradient by providing two colors\n    function BG_Gradient(color1, color2){\n      let bg = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight)\n      bg.addColorStop(0, color1)\n      bg.addColorStop(1, color2)\n      return bg\n    }\n\n    // This will be called every 1000ms and the code would execute\n    setInterval(() => {\n      if(velocityOfBall <= 7){\n        velocityOfBall += 0.08\n      }else{\n        velocityOfBall += 0\n      }\n    }, 1500)\n\n\n    // EVENT LISTENERS\n\n    // Clicking on the canvas would change the color\n    canvas.addEventListener('mousedown', () => {\n      if (!failed) {\n        redBall.change(colors[0], colors[1])\n        blueBall.change(colors[1], colors[0])\n      }\n    })\n\n    // retry again by clicking the retry button\n    retryBtn.addEventListener('mousedown', () => {\n      failed = false\n      init()\n    })\n\n    // Start playing now.\n    playBtn.addEventListener('mousedown', () => {\n      startScreen.classList.add('hide')\n      init()\n    })\n\n    window.addEventListener('resize', () => {\n      canvasHeight = window.innerHeight - 50\n      canvas.height = canvasHeight\n    })\n  }, []);\n\n  return (\n    <>\n      <div className=\"start-screen\">\n        <div className=\"game-data\">\n          <span className=\"name\"><span>Color</span> <span>Collision</span></span>\n        </div>\n        <span className=\"info\">\n          <span className=\"highlight _1\">FOCUS</span> is the weapon.\n          Don't make the wrong move.\n          Tap / click to change the color and save the central balls.\n          Because if the central balls don't stay alive <span className=\"highlight _2\">YOU DIE</span>.\n          Better play <span className=\"highlight _3\">SAFE</span> and make a new highscore.\n        </span>\n        <button className=\"btn play\">PLAY</button>\n      </div>\n\n      <span className=\"retry-text hide\" data-splitting=''>Game Over!</span>\n      <button className=\"retry-btn hide\" data-splitting=''>RETRY</button>\n      <canvas data-canvas></canvas>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // New service worker found\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}